// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// NameList List of names, such as backends or entities
type NameList = []string

// PagedResult Paged list of items
type PagedResult struct {
	Data *[]UntypedDto `json:"data,omitempty"`

	// Offset Offset of current page from the beginning
	Offset *float32 `json:"offset,omitempty"`

	// TotalCount Total number of items matching current filter
	TotalCount *float32 `json:"total_count,omitempty"`
}

// UntypedDto Unstructured content, dictionary of string-to-any values.
type UntypedDto map[string]interface{}

// Backend defines model for backend.
type Backend = string

// Entity defines model for entity.
type Entity = string

// ListItemsParams defines parameters for ListItems.
type ListItemsParams struct {
	// PageOffset Page offset
	PageOffset *int `form:"page-offset,omitempty" json:"page-offset,omitempty"`

	// PageSize Page size
	PageSize *int `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Order List of order instructions in form of `key=direction`.
	// Key represents entity field (column) and direction is one of `ASC` or `DESC`,
	// for example `name=ASC` or `id=DESC`.
	// Direction can be omitted, in such case `ASC` is assumed.
	Order *[]string `form:"order[],omitempty" json:"order[],omitempty"`

	// Filter Filter is JSON-encoded FilterExpression.
	// Currently supported types are `simple`, `not` and `junction`.
	// Examples:
	//
	// - `{"simple": { "name": "id", "op": "=", "val" : 1}}`
	//
	//    is equivalent to SQL `id=1`
	//
	// - `{"not": { "simple": { "name": "id", "op": ">", "val" : 100}}}`
	//
	//    is equivalent to SQL `NOT (id>100)`
	//
	// - `{"junction": {"op": "AND", "sub" : [{"simple": { "name": "age", "op": ">", "val" : 35}}, {"simple": { "name": "salary", "op": ">", "val" : 5000}}]}}`
	//
	//    is equivalent to SQL `(age>35) AND (salary > 5000)`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = UntypedDto

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all configured backends
	// (GET /backends)
	ListBackends(w http.ResponseWriter, r *http.Request)
	// List all known entities within backend
	// (GET /{backend}/entities)
	ListEntities(w http.ResponseWriter, r *http.Request, backend Backend)
	// List entity items
	// (GET /{backend}/{entity})
	ListItems(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, params ListItemsParams)
	// Create new entity item
	// (POST /{backend}/{entity})
	CreateItem(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity)
	// Delete entity item by ID
	// (DELETE /{backend}/{entity}/{id})
	DeleteItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Get entity item by ID
	// (GET /{backend}/{entity}/{id})
	GetItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Check for existence of entity item by ID
	// (HEAD /{backend}/{entity}/{id})
	ExistsItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Update entity item in-place by ID
	// (PUT /{backend}/{entity}/{id})
	UpdateItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBackends operation middleware
func (siw *ServerInterfaceWrapper) ListBackends(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBackends(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntities operation middleware
func (siw *ServerInterfaceWrapper) ListEntities(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntities(w, r, backend)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListItems operation middleware
func (siw *ServerInterfaceWrapper) ListItems(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListItemsParams

	// ------------- Optional query parameter "page-offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-offset", r.URL.Query(), &params.PageOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-offset", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "order[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "order[]", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order[]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListItems(w, r, backend, entity, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateItem(w, r, backend, entity)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExistsItemById operation middleware
func (siw *ServerInterfaceWrapper) ExistsItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExistsItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/backends", wrapper.ListBackends).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/entities", wrapper.ListEntities).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}", wrapper.ListItems).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}", wrapper.CreateItem).Methods("POST")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.DeleteItemById).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.GetItemById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.ExistsItemById).Methods("HEAD")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.UpdateItemById).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5zafPauHl2Z7O1yUm6fmPwEAAP//BZ7xvEgXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
