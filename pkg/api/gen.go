// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// NameList List of names, such as backends or entities
type NameList = []string

// PagedResult Paged list of items
type PagedResult struct {
	Data *[]UntypedDto `json:"data,omitempty"`

	// Offset Offset of current page from the beginning
	Offset *float32 `json:"offset,omitempty"`

	// TotalCount Total number of items matching current filter
	TotalCount *int `json:"total_count,omitempty"`
}

// UntypedDto Unstructured content, dictionary of string-to-any values.
type UntypedDto map[string]interface{}

// Backend defines model for backend.
type Backend = string

// Entity defines model for entity.
type Entity = string

// ListItemsParams defines parameters for ListItems.
type ListItemsParams struct {
	// PageOffset Page offset
	PageOffset *int `form:"page-offset,omitempty" json:"page-offset,omitempty"`

	// PageSize Page size
	PageSize *int `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Order List of order instructions in form of `key=direction`.
	// Key represents entity field (column) and direction is one of `ASC` or `DESC`,
	// for example `name=ASC` or `id=DESC`.
	// Direction can be omitted, in such case `ASC` is assumed.
	Order *[]string `form:"order[],omitempty" json:"order[],omitempty"`

	// Filter Filter is JSON-encoded FilterExpression.
	// Currently supported types are `simple`, `not` and `junction`.
	// Examples:
	//
	// - `{"simple": { "name": "id", "op": "=", "val" : 1}}`
	//
	//    is equivalent to SQL `id=1`
	//
	// - `{"not": { "simple": { "name": "id", "op": ">", "val" : 100}}}`
	//
	//    is equivalent to SQL `NOT (id>100)`
	//
	// - `{"junction": {"op": "AND", "sub" : [{"simple": { "name": "age", "op": ">", "val" : 35}}, {"simple": { "name": "salary", "op": ">", "val" : 5000}}]}}`
	//
	//    is equivalent to SQL `(age>35) AND (salary > 5000)`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = UntypedDto

// UpdateItemByIdJSONRequestBody defines body for UpdateItemById for application/json ContentType.
type UpdateItemByIdJSONRequestBody = UntypedDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListBackends request
	ListBackends(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEntities request
	ListEntities(ctx context.Context, backend Backend, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListItems request
	ListItems(ctx context.Context, backend Backend, entity Entity, params *ListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateItemWithBody request with any body
	CreateItemWithBody(ctx context.Context, backend Backend, entity Entity, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateItem(ctx context.Context, backend Backend, entity Entity, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteItemById request
	DeleteItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemById request
	GetItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExistsItemById request
	ExistsItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateItemByIdWithBody request with any body
	UpdateItemByIdWithBody(ctx context.Context, backend Backend, entity Entity, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateItemById(ctx context.Context, backend Backend, entity Entity, id string, body UpdateItemByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListBackends(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBackendsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEntities(ctx context.Context, backend Backend, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEntitiesRequest(c.Server, backend)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListItems(ctx context.Context, backend Backend, entity Entity, params *ListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListItemsRequest(c.Server, backend, entity, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateItemWithBody(ctx context.Context, backend Backend, entity Entity, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateItemRequestWithBody(c.Server, backend, entity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateItem(ctx context.Context, backend Backend, entity Entity, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateItemRequest(c.Server, backend, entity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteItemByIdRequest(c.Server, backend, entity, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemByIdRequest(c.Server, backend, entity, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExistsItemById(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExistsItemByIdRequest(c.Server, backend, entity, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateItemByIdWithBody(ctx context.Context, backend Backend, entity Entity, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateItemByIdRequestWithBody(c.Server, backend, entity, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateItemById(ctx context.Context, backend Backend, entity Entity, id string, body UpdateItemByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateItemByIdRequest(c.Server, backend, entity, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListBackendsRequest generates requests for ListBackends
func NewListBackendsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEntitiesRequest generates requests for ListEntities
func NewListEntitiesRequest(server string, backend Backend) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/entities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListItemsRequest generates requests for ListItems
func NewListItemsRequest(server string, backend Backend, entity Entity, params *ListItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-offset", runtime.ParamLocationQuery, *params.PageOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order[]", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateItemRequest calls the generic CreateItem builder with application/json body
func NewCreateItemRequest(server string, backend Backend, entity Entity, body CreateItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateItemRequestWithBody(server, backend, entity, "application/json", bodyReader)
}

// NewCreateItemRequestWithBody generates requests for CreateItem with any type of body
func NewCreateItemRequestWithBody(server string, backend Backend, entity Entity, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteItemByIdRequest generates requests for DeleteItemById
func NewDeleteItemByIdRequest(server string, backend Backend, entity Entity, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemByIdRequest generates requests for GetItemById
func NewGetItemByIdRequest(server string, backend Backend, entity Entity, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExistsItemByIdRequest generates requests for ExistsItemById
func NewExistsItemByIdRequest(server string, backend Backend, entity Entity, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateItemByIdRequest calls the generic UpdateItemById builder with application/json body
func NewUpdateItemByIdRequest(server string, backend Backend, entity Entity, id string, body UpdateItemByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateItemByIdRequestWithBody(server, backend, entity, id, "application/json", bodyReader)
}

// NewUpdateItemByIdRequestWithBody generates requests for UpdateItemById with any type of body
func NewUpdateItemByIdRequestWithBody(server string, backend Backend, entity Entity, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "backend", runtime.ParamLocationPath, backend)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListBackendsWithResponse request
	ListBackendsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBackendsResponse, error)

	// ListEntitiesWithResponse request
	ListEntitiesWithResponse(ctx context.Context, backend Backend, reqEditors ...RequestEditorFn) (*ListEntitiesResponse, error)

	// ListItemsWithResponse request
	ListItemsWithResponse(ctx context.Context, backend Backend, entity Entity, params *ListItemsParams, reqEditors ...RequestEditorFn) (*ListItemsResponse, error)

	// CreateItemWithBodyWithResponse request with any body
	CreateItemWithBodyWithResponse(ctx context.Context, backend Backend, entity Entity, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateItemResponse, error)

	CreateItemWithResponse(ctx context.Context, backend Backend, entity Entity, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateItemResponse, error)

	// DeleteItemByIdWithResponse request
	DeleteItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*DeleteItemByIdResponse, error)

	// GetItemByIdWithResponse request
	GetItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*GetItemByIdResponse, error)

	// ExistsItemByIdWithResponse request
	ExistsItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*ExistsItemByIdResponse, error)

	// UpdateItemByIdWithBodyWithResponse request with any body
	UpdateItemByIdWithBodyWithResponse(ctx context.Context, backend Backend, entity Entity, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateItemByIdResponse, error)

	UpdateItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, body UpdateItemByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateItemByIdResponse, error)
}

type ListBackendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameList
}

// Status returns HTTPResponse.Status
func (r ListBackendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBackendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameList
}

// Status returns HTTPResponse.Status
func (r ListEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PagedResult
}

// Status returns HTTPResponse.Status
func (r ListItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UntypedDto
}

// Status returns HTTPResponse.Status
func (r CreateItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteItemByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteItemByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteItemByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UntypedDto
}

// Status returns HTTPResponse.Status
func (r GetItemByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExistsItemByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExistsItemByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExistsItemByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateItemByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *UntypedDto
}

// Status returns HTTPResponse.Status
func (r UpdateItemByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateItemByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListBackendsWithResponse request returning *ListBackendsResponse
func (c *ClientWithResponses) ListBackendsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBackendsResponse, error) {
	rsp, err := c.ListBackends(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBackendsResponse(rsp)
}

// ListEntitiesWithResponse request returning *ListEntitiesResponse
func (c *ClientWithResponses) ListEntitiesWithResponse(ctx context.Context, backend Backend, reqEditors ...RequestEditorFn) (*ListEntitiesResponse, error) {
	rsp, err := c.ListEntities(ctx, backend, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEntitiesResponse(rsp)
}

// ListItemsWithResponse request returning *ListItemsResponse
func (c *ClientWithResponses) ListItemsWithResponse(ctx context.Context, backend Backend, entity Entity, params *ListItemsParams, reqEditors ...RequestEditorFn) (*ListItemsResponse, error) {
	rsp, err := c.ListItems(ctx, backend, entity, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListItemsResponse(rsp)
}

// CreateItemWithBodyWithResponse request with arbitrary body returning *CreateItemResponse
func (c *ClientWithResponses) CreateItemWithBodyWithResponse(ctx context.Context, backend Backend, entity Entity, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateItemResponse, error) {
	rsp, err := c.CreateItemWithBody(ctx, backend, entity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateItemResponse(rsp)
}

func (c *ClientWithResponses) CreateItemWithResponse(ctx context.Context, backend Backend, entity Entity, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateItemResponse, error) {
	rsp, err := c.CreateItem(ctx, backend, entity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateItemResponse(rsp)
}

// DeleteItemByIdWithResponse request returning *DeleteItemByIdResponse
func (c *ClientWithResponses) DeleteItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*DeleteItemByIdResponse, error) {
	rsp, err := c.DeleteItemById(ctx, backend, entity, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteItemByIdResponse(rsp)
}

// GetItemByIdWithResponse request returning *GetItemByIdResponse
func (c *ClientWithResponses) GetItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*GetItemByIdResponse, error) {
	rsp, err := c.GetItemById(ctx, backend, entity, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemByIdResponse(rsp)
}

// ExistsItemByIdWithResponse request returning *ExistsItemByIdResponse
func (c *ClientWithResponses) ExistsItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, reqEditors ...RequestEditorFn) (*ExistsItemByIdResponse, error) {
	rsp, err := c.ExistsItemById(ctx, backend, entity, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExistsItemByIdResponse(rsp)
}

// UpdateItemByIdWithBodyWithResponse request with arbitrary body returning *UpdateItemByIdResponse
func (c *ClientWithResponses) UpdateItemByIdWithBodyWithResponse(ctx context.Context, backend Backend, entity Entity, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateItemByIdResponse, error) {
	rsp, err := c.UpdateItemByIdWithBody(ctx, backend, entity, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateItemByIdResponse(rsp)
}

func (c *ClientWithResponses) UpdateItemByIdWithResponse(ctx context.Context, backend Backend, entity Entity, id string, body UpdateItemByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateItemByIdResponse, error) {
	rsp, err := c.UpdateItemById(ctx, backend, entity, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateItemByIdResponse(rsp)
}

// ParseListBackendsResponse parses an HTTP response from a ListBackendsWithResponse call
func ParseListBackendsResponse(rsp *http.Response) (*ListBackendsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBackendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEntitiesResponse parses an HTTP response from a ListEntitiesWithResponse call
func ParseListEntitiesResponse(rsp *http.Response) (*ListEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListItemsResponse parses an HTTP response from a ListItemsWithResponse call
func ParseListItemsResponse(rsp *http.Response) (*ListItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PagedResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateItemResponse parses an HTTP response from a CreateItemWithResponse call
func ParseCreateItemResponse(rsp *http.Response) (*CreateItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UntypedDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteItemByIdResponse parses an HTTP response from a DeleteItemByIdWithResponse call
func ParseDeleteItemByIdResponse(rsp *http.Response) (*DeleteItemByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteItemByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetItemByIdResponse parses an HTTP response from a GetItemByIdWithResponse call
func ParseGetItemByIdResponse(rsp *http.Response) (*GetItemByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UntypedDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExistsItemByIdResponse parses an HTTP response from a ExistsItemByIdWithResponse call
func ParseExistsItemByIdResponse(rsp *http.Response) (*ExistsItemByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExistsItemByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateItemByIdResponse parses an HTTP response from a UpdateItemByIdWithResponse call
func ParseUpdateItemByIdResponse(rsp *http.Response) (*UpdateItemByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateItemByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest UntypedDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all configured backends
	// (GET /backends)
	ListBackends(w http.ResponseWriter, r *http.Request)
	// List all known entities within backend
	// (GET /{backend}/entities)
	ListEntities(w http.ResponseWriter, r *http.Request, backend Backend)
	// List entity items
	// (GET /{backend}/{entity})
	ListItems(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, params ListItemsParams)
	// Create new entity item
	// (POST /{backend}/{entity})
	CreateItem(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity)
	// Delete entity item by ID
	// (DELETE /{backend}/{entity}/{id})
	DeleteItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Get entity item by ID
	// (GET /{backend}/{entity}/{id})
	GetItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Check for existence of entity item by ID
	// (HEAD /{backend}/{entity}/{id})
	ExistsItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
	// Update entity item in-place by ID
	// (PUT /{backend}/{entity}/{id})
	UpdateItemById(w http.ResponseWriter, r *http.Request, backend Backend, entity Entity, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBackends operation middleware
func (siw *ServerInterfaceWrapper) ListBackends(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBackends(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntities operation middleware
func (siw *ServerInterfaceWrapper) ListEntities(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntities(w, r, backend)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListItems operation middleware
func (siw *ServerInterfaceWrapper) ListItems(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListItemsParams

	// ------------- Optional query parameter "page-offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-offset", r.URL.Query(), &params.PageOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-offset", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "order[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "order[]", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order[]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListItems(w, r, backend, entity, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateItem(w, r, backend, entity)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExistsItemById operation middleware
func (siw *ServerInterfaceWrapper) ExistsItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExistsItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "backend" -------------
	var backend Backend

	err = runtime.BindStyledParameterWithOptions("simple", "backend", mux.Vars(r)["backend"], &backend, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "backend", Err: err})
		return
	}

	// ------------- Path parameter "entity" -------------
	var entity Entity

	err = runtime.BindStyledParameterWithOptions("simple", "entity", mux.Vars(r)["entity"], &entity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, backend, entity, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/backends", wrapper.ListBackends).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/entities", wrapper.ListEntities).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}", wrapper.ListItems).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}", wrapper.CreateItem).Methods("POST")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.DeleteItemById).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.GetItemById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.ExistsItemById).Methods("HEAD")

	r.HandleFunc(options.BaseURL+"/{backend}/{entity}/{id}", wrapper.UpdateItemById).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
